// title      : Semi-regular polyhedrons Library (Archimedean solids)
// author     : Gilbert Duval
// license    : MIT License
// revision   : 0.001
// tags       : polyhedron archimede
// file       : polyhedrons_archimede.jscad

// Data from dmccooey.com/polyhedra

const jscad = require('@jscad/modeling')
const { polyhedron } = jscad.primitives
const { scale, translate } = jscad.transforms
const { colorize, colorNameToRgb } = jscad.colors

function main() {
  polyh2()
  
  let r = []
  
  function rpush(d, e, c, a) {
    return colorize(colorNameToRgb(c), translate(d, scale([e,e,e], a)))
  }
  
  r.push(rpush([-75, 75], 20, "blue", polyh2.cuboctahedron()))
  r.push(rpush([-25, 75], 15, "green", polyh2.icosidodecahedron()))
  r.push(rpush([ 25, 75], 10, "red", polyh2.rhombicosidodecahedron()))
  r.push(rpush([ 75, 75], 15, "cyan", polyh2.rhombicuboctahedron()))
  r.push(rpush([-75, 25], 15, "magenta", polyh2.snub_cube_dextro()))
  r.push(rpush([-25, 25], 15, "purple", polyh2.snub_cube_laevo()))
  r.push(rpush([ 25, 25], 10, "maroon", polyh2.snub_dodecahedron_dextro()))
  r.push(rpush([ 75, 25], 10, "fuchsia", polyh2.snub_dodecahedron_laevo()))
  r.push(rpush([-75,-25], 13, "pink", polyh2.truncated_cube()))
  r.push(rpush([-25,-25], 10, "orange", polyh2.truncated_cuboctahedron()))
  r.push(rpush([ 25,-25], 10, "yellow", polyh2.truncated_icosahedron()))
  r.push(rpush([ 75,-25], 6,  "tan", polyh2.truncated_icosidodecahedron()))
  r.push(rpush([-75,-75], 15, "aqua", polyh2.truncated_octahedron()))
  r.push(rpush([-25,-75], 20, "lime", polyh2.truncated_tetrahedron()))
  
  return r
}

module.exports = { main }

// Library to include with : include("polyhedrons_archimede.jscad");
// Instanciate before use : polyh2();

polyh2 = function() {
polyh2.truncated_tetrahedron = function() {
// http://dmccooey.com/polyhedra/TruncatedTetrahedron.html
var C0, C1, vertices, faces;

C0 = Math.sqrt(2) / 4;
C1 = 3 * C0;

vertices = [
[C0, -C0,  C1],
[C0,  C0, -C1],
[-C0,  C0,  C1],
[-C0, -C0, -C1],
[C1, -C0,  C0],
[C1,  C0, -C0],
[-C1,  C0,  C0],
[-C1, -C0, -C0],
[C0, -C1,  C0],
[C0,  C1, -C0],
[-C0,  C1,  C0],
[-C0, -C1, -C0]
];
faces= [
[0,  4,  5,  9, 10,  2],
[1,  5,  4,  8, 11,  3],
[2,  6,  7, 11,  8,  0],
[3,  7,  6, 10,  9,  1],
[0,  8,  4],
[1,  9,  5],
[2, 10,  6],
[3, 11,  7]
];

return polyhedron({points: vertices, faces: faces});
}

polyh2.cuboctahedron = function() {
// http://dmccooey.com/polyhedra/Cuboctahedron.html
var C0, vertices, faces;
    
C0 = Math.sqrt(2) / 2;
vertices = [  
    [C0, 0, C0],[C0, 0, -C0],[-C0, 0,  C0],[-C0, 0, -C0],
    [C0,  C0, 0],[C0, -C0, 0],[-C0,  C0, 0],[-C0, -C0, 0],
    [0,  C0,  C0],[0,  C0, -C0],[0, -C0,  C0],[0, -C0, -C0]
];
faces = [
    [0,5,1,4],[0,8,2,10],[7,2,6,3],[7, 11,5,10],[9,1,11,3],[9,6,8,4],
    [0,4,8],[1,5,11],[2,7,10],[3,6,9],[4,1,9],[5,0,10],[6,2,8],[7,3,11]
];
    
return polyhedron({points:vertices, faces:faces});
}

polyh2.truncated_octahedron = function() {
// http://dmccooey.com/polyhedra/TruncatedOctahedron.html
var C1, C0, vertices, faces;

C1 = Math.sqrt(2);
C0 = C1 / 2;

vertices = [
[ C0, 0.0,  C1],
[ C0, 0.0, -C1],
[-C0, 0.0,  C1],
[-C0, 0.0, -C1],
[ C1,  C0, 0.0],
[ C1, -C0, 0.0],
[-C1,  C0, 0.0],
[-C1, -C0, 0.0],
[0.0,  C1,  C0],
[0.0,  C1, -C0],
[0.0, -C1,  C0],
[0.0, -C1, -C0],
[0.0,  C0,  C1],
[0.0,  C0, -C1],
[0.0, -C0,  C1],
[0.0, -C0, -C1],
[ C1, 0.0,  C0],
[ C1, 0.0, -C0],
[-C1, 0.0,  C0],
[-C1, 0.0, -C0],
[ C0,  C1, 0.0],
[ C0, -C1, 0.0],
[-C0,  C1, 0.0],
[-C0, -C1, 0.0]    
    ];

faces = [
[  0, 14, 10, 21,  5, 16 ],
[  1, 13,  9, 20,  4, 17 ],
[  2, 12,  8, 22,  6, 18 ],
[  3, 15, 11, 23,  7, 19 ],
[  4, 20,  8, 12,  0, 16 ],
[  5, 21, 11, 15,  1, 17 ],
[  7, 23, 10, 14,  2, 18 ],
[  6, 22,  9, 13,  3, 19 ],
[  0, 12,  2, 14 ],
[  1, 15,  3, 13 ],
[  4, 16,  5, 17 ],
[  6, 19,  7, 18 ],
[  8, 20,  9, 22 ],
[ 10, 23, 11, 21 ]
    ];

return polyhedron({points:vertices, faces:faces});
}

polyh2.truncated_cube = function() {
// http://dmccooey.com/polyhedra/TruncatedCube.html
var C0, vertices, faces;
    
C0 = (1 + Math.sqrt(2)) / 2;
vertices = [
[C0,  0.5,   C0],
[C0,  0.5,  -C0],
[C0, -0.5,   C0],
[C0, -0.5,  -C0],
[-C0,  0.5,   C0],
[-C0,  0.5,  -C0],
[-C0, -0.5,   C0],
[-C0, -0.5,  -C0],
[C0,   C0,  0.5],
[C0,   C0, -0.5],
[C0,  -C0,  0.5],
[C0,  -C0, -0.5],
[-C0,   C0,  0.5],
[-C0,   C0, -0.5],
[-C0,  -C0,  0.5],
[-C0,  -C0, -0.5],
[0.5,   C0,   C0],
[0.5,   C0,  -C0],
[0.5,  -C0,   C0],
[0.5,  -C0,  -C0],
[-0.5,   C0,   C0],
[-0.5,   C0,  -C0],
[-0.5,  -C0,   C0],
[-0.5,  -C0,  -C0]
];

faces = [
[0,  2, 10, 11,  3,  1,  9,  8],
[0, 16, 20,  4,  6, 22, 18,  2],
[12, 13,  5,  7, 15, 14,  6,  4],
[12, 20, 16,  8,  9, 17, 21, 13],
[19, 23,  7,  5, 21, 17,  1,  3],
[19, 11, 10, 18, 22, 14, 15, 23],
[0,  8, 16],
[1, 17,  9],
[2, 18, 10],
[3, 11, 19],
[4, 20, 12],
[5, 13, 21],
[6, 14, 22],
[7, 23, 15]
];
    
return polyhedron({points:vertices, faces:faces});
}

polyh2.rhombicuboctahedron = function() {
// http://dmccooey.com/polyhedra/Rhombicuboctahedron.html
var C0, vertices, faces;

C0 = (1 + Math.sqrt(2)) / 2;

vertices = [
 [ 0.5,  0.5,   C0],
 [ 0.5,  0.5,  -C0],
 [ 0.5, -0.5,   C0],
 [ 0.5, -0.5,  -C0],
 [-0.5,  0.5,   C0],
 [-0.5,  0.5,  -C0],
 [-0.5, -0.5,   C0],
 [-0.5, -0.5,  -C0],
 [  C0,  0.5,  0.5],
 [  C0,  0.5, -0.5],
 [  C0, -0.5,  0.5],
 [  C0, -0.5, -0.5],
 [ -C0,  0.5,  0.5],
 [ -C0,  0.5, -0.5],
 [ -C0, -0.5,  0.5],
 [ -C0, -0.5, -0.5],
 [ 0.5,   C0,  0.5],
 [ 0.5,   C0, -0.5],
 [ 0.5,  -C0,  0.5],
 [ 0.5,  -C0, -0.5],
 [-0.5,   C0,  0.5],
 [-0.5,   C0, -0.5],
 [-0.5,  -C0,  0.5],
 [-0.5,  -C0, -0.5]
];
faces = [
[  0,  4,  6,  2 ],
[  1,  3,  7,  5 ],
[  8, 10, 11,  9 ],
[ 12, 13, 15, 14 ],
[ 16, 17, 21, 20 ],
[ 18, 22, 23, 19 ],
[  0,  2, 10,  8 ],
[  0, 16, 20,  4 ],
[  7,  3, 19, 23 ],
[  7, 15, 13,  5 ],
[ 11,  3,  1,  9 ],
[ 11, 10, 18, 19 ],
[ 12, 14,  6,  4 ],
[ 12, 20, 21, 13 ],
[ 17,  1,  5, 21 ],
[ 17, 16,  8,  9 ],
[ 22, 14, 15, 23 ],
[ 22, 18,  2,  6 ],
[  0,  8, 16 ],
[  1, 17,  9 ],
[  2, 18, 10 ],
[  3, 11, 19 ],
[  4, 20, 12 ],
[  5, 13, 21 ],
[  6, 14, 22 ],
[  7, 23, 15 ]
];

return polyhedron({points:vertices, faces:faces});
}

polyh2.snub_cube_laevo = function() {
// http://dmccooey.com/polyhedra/LsnubCube.html
var C0, C1, C2, vertices, faces;
    
C0 = Math.sqrt(3 * (4 - Math.cbrt(17 + 3* Math.sqrt(33)) - Math.cbrt(17 - 3* Math.sqrt(33)))) / 6;
C1 = Math.sqrt(3 * (2 + Math.cbrt(17 + 3* Math.sqrt(33)) + Math.cbrt(17 - 3* Math.sqrt(33)))) / 6;
C2 = Math.sqrt(3 * (4 + Math.cbrt(199 + 3* Math.sqrt(33)) + Math.cbrt(199 - 3* Math.sqrt(33)))) / 6;

vertices =[
[ C1,  C0,  C2],
[ C1, -C0, -C2],
[-C1, -C0,  C2],
[-C1,  C0, -C2],
[ C2,  C1,  C0],
[ C2, -C1, -C0],
[-C2, -C1,  C0],
[-C2,  C1, -C0],
[ C0,  C2,  C1],
[ C0, -C2, -C1],
[-C0, -C2,  C1],
[-C0,  C2, -C1],
[ C0, -C1,  C2],
[ C0,  C1, -C2],
[-C0,  C1,  C2],
[-C0, -C1, -C2],
[ C2, -C0,  C1],
[ C2,  C0, -C1],
[-C2,  C0,  C1],
[-C2, -C0, -C1],
[ C1, -C2,  C0],
[ C1,  C2, -C0],
[-C1,  C2,  C0],
[-C1, -C2, -C0]
];

faces = [
[ 2, 12,  0, 14],
[ 3, 13,  1, 15],
[ 4, 16,  5, 17],
[ 7, 19,  6, 18],
[ 8, 21, 11, 22],
[ 9, 20, 10, 23],
[ 0,  8, 14],
[ 1,  9, 15],
[ 2, 10, 12],
[ 3, 11, 13],
[ 4,  0, 16],
[ 5,  1, 17],
[ 6,  2, 18],
[ 7,  3, 19],
[ 8,  4, 21],
[ 9,  5, 20],
[10,  6, 23],
[11,  7, 22],
[12, 16,  0],
[13, 17,  1],
[14, 18,  2],
[15, 19,  3],
[16, 20,  5],
[17, 21,  4],
[18, 22,  7],
[19, 23,  6],
[20, 12, 10],
[21, 13, 11],
[22, 14,  8],
[23, 15,  9],
[ 8,  0,  4],
[ 9,  1,  5],
[10,  2,  6],
[11,  3,  7],
[12, 20, 16],
[13, 21, 17],
[14, 22, 18],
[15, 23, 19]
];

return polyhedron({points:vertices, faces:faces});
}

polyh2.snub_cube_dextro = function() {
// http://dmccooey.com/polyhedra/LsnubCube.html
var C0, C1, C2, vertices, faces;
    
C0 = Math.sqrt(3 * (4 - Math.cbrt(17 + 3* Math.sqrt(33)) - Math.cbrt(17 - 3* Math.sqrt(33)))) / 6;
C1 = Math.sqrt(3 * (2 + Math.cbrt(17 + 3* Math.sqrt(33)) + Math.cbrt(17 - 3* Math.sqrt(33)))) / 6;
C2 = Math.sqrt(3 * (4 + Math.cbrt(199 + 3* Math.sqrt(33)) + Math.cbrt(199 - 3* Math.sqrt(33)))) / 6;

vertices = [
[ C1, -C0,  C2],
[ C1,  C0, -C2],
[-C1,  C0,  C2],
[-C1, -C0, -C2],
[ C2, -C1,  C0],
[ C2,  C1, -C0],
[-C2,  C1,  C0],
[-C2, -C1, -C0],
[ C0, -C2,  C1],
[ C0,  C2, -C1],
[-C0,  C2,  C1],
[-C0, -C2, -C1],
[ C0,  C1,  C2],
[ C0, -C1, -C2],
[-C0, -C1,  C2],
[-C0,  C1, -C2],
[ C2,  C0,  C1],
[ C2, -C0, -C1],
[-C2, -C0,  C1],
[-C2,  C0, -C1],
[ C1,  C2,  C0],
[ C1, -C2, -C0],
[-C1, -C2,  C0],
[-C1,  C2, -C0]
];

faces = [
[ 2, 14,  0, 12],
[ 3, 15,  1, 13],
[ 4, 17,  5, 16],
[ 7, 18,  6, 19],
[ 8, 22, 11, 21],
[ 9, 23, 10, 20],
[ 0, 14,  8],
[ 1, 15,  9],
[ 2, 12, 10],
[ 3, 13, 11],
[ 4, 16,  0],
[ 5, 17,  1],
[ 6, 18,  2],
[ 7, 19,  3],
[ 8, 21,  4],
[ 9, 20,  5],
[10, 23,  6],
[11, 22,  7],
[12,  0, 16],
[13,  1, 17],
[14,  2, 18],
[15,  3, 19],
[16,  5, 20],
[17,  4, 21],
[18,  7, 22],
[19,  6, 23],
[20, 10, 12],
[21, 11, 13],
[22,  8, 14],
[23,  9, 15],
[ 8,  4,  0],
[ 9,  5,  1],
[10,  6,  2],
[11,  7,  3],
[12, 16, 20],
[13, 17, 21],
[14, 18, 22],
[15, 19, 23]
];

return polyhedron({points:vertices, faces:faces});
}

polyh2.icosidodecahedron = function() {
// http://dmccooey.com/polyhedra/Icosidodecahedron.html
var C0, C1, C2, vertices, faces;
    
C0 = (1 + Math.sqrt(5)) / 4;
C1 = (3 + Math.sqrt(5)) / 4;
C2 = (1 + Math.sqrt(5)) / 2;

vertices = [
[ 0.0,  0.0,   C2],
[ 0.0,  0.0,  -C2],
[  C2,  0.0,  0.0],
[ -C2,  0.0,  0.0],
[ 0.0,   C2,  0.0],
[ 0.0,  -C2,  0.0],
[ 0.5,   C0,   C1],
[ 0.5,   C0,  -C1],
[ 0.5,  -C0,   C1],
[ 0.5,  -C0,  -C1],
[-0.5,   C0,   C1],
[-0.5,   C0,  -C1],
[-0.5,  -C0,   C1],
[-0.5,  -C0,  -C1],
[  C1,  0.5,   C0],
[  C1,  0.5,  -C0],
[  C1, -0.5,   C0],
[  C1, -0.5,  -C0],
[ -C1,  0.5,   C0],
[ -C1,  0.5,  -C0],
[ -C1, -0.5,   C0],
[ -C1, -0.5,  -C0],
[  C0,   C1,  0.5],
[  C0,   C1, -0.5],
[  C0,  -C1,  0.5],
[  C0,  -C1, -0.5],
[ -C0,   C1,  0.5],
[ -C0,   C1, -0.5],
[ -C0,  -C1,  0.5],
[ -C0,  -C1, -0.5]
];

faces = [
[ 0,  8, 16, 14,  6],
[ 0, 10, 18, 20, 12],
[ 1,  7, 15, 17,  9],
[ 1, 13, 21, 19, 11],
[ 2, 15, 23, 22, 14],
[ 2, 16, 24, 25, 17],
[ 3, 18, 26, 27, 19],
[ 3, 21, 29, 28, 20],
[ 4, 23,  7, 11, 27],
[ 4, 26, 10,  6, 22],
[ 5, 24,  8, 12, 28],
[ 5, 29, 13,  9, 25],
[ 0,  6, 10],
[ 0, 12,  8],
[ 1,  9, 13],
[ 1, 11,  7],
[ 2, 14, 16],
[ 2, 17, 15],
[ 3, 19, 21],
[ 3, 20, 18],
[ 4, 22, 23],
[ 4, 27, 26],
[ 5, 25, 24],
[ 5, 28, 29],
[ 6, 14, 22],
[ 7, 23, 15],
[ 8, 24, 16],
[ 9, 17, 25],
[10, 26, 18],
[11, 19, 27],
[12, 20, 28],
[13, 29, 21]
];

    
return polyhedron({points:vertices, faces:faces});
}

polyh2.truncated_cuboctahedron = function() {
// http://dmccooey.com/polyhedra/TruncatedCuboctahedron.html
var C0, C1, vertices, faces;
    
C0 = (1 + Math.sqrt(2)) / 2;
C1 = (1 + 2 * Math.sqrt(2)) / 2;

vertices = [
[  C0,  0.5,   C1],
[  C0,  0.5,  -C1],
[  C0, -0.5,   C1],
[  C0, -0.5,  -C1],
[ -C0,  0.5,   C1],
[ -C0,  0.5,  -C1],
[ -C0, -0.5,   C1],
[ -C0, -0.5,  -C1],
[  C1,   C0,  0.5],
[  C1,   C0, -0.5],
[  C1,  -C0,  0.5],
[  C1,  -C0, -0.5],
[ -C1,   C0,  0.5],
[ -C1,   C0, -0.5],
[ -C1,  -C0,  0.5],
[ -C1,  -C0, -0.5],
[ 0.5,   C1,   C0],
[ 0.5,   C1,  -C0],
[ 0.5,  -C1,   C0],
[ 0.5,  -C1,  -C0],
[-0.5,   C1,   C0],
[-0.5,   C1,  -C0],
[-0.5,  -C1,   C0],
[-0.5,  -C1,  -C0],
[ 0.5,   C0,   C1],
[ 0.5,   C0,  -C1],
[ 0.5,  -C0,   C1],
[ 0.5,  -C0,  -C1],
[-0.5,   C0,   C1],
[-0.5,   C0,  -C1],
[-0.5,  -C0,   C1],
[-0.5,  -C0,  -C1],
[  C1,  0.5,   C0],
[  C1,  0.5,  -C0],
[  C1, -0.5,   C0],
[  C1, -0.5,  -C0],
[ -C1,  0.5,   C0],
[ -C1,  0.5,  -C0],
[ -C1, -0.5,   C0],
[ -C1, -0.5,  -C0],
[  C0,   C1,  0.5],
[  C0,   C1, -0.5],
[  C0,  -C1,  0.5],
[  C0,  -C1, -0.5],
[ -C0,   C1,  0.5],
[ -C0,   C1, -0.5],
[ -C0,  -C1,  0.5],
[ -C0,  -C1, -0.5]
];

faces = [
[ 0, 24, 28,  4,  6, 30, 26,  2],
[ 1,  3, 27, 31,  7,  5, 29, 25],
[ 8, 32, 34, 10, 11, 35, 33,  9],
[12, 13, 37, 39, 15, 14, 38, 36],
[16, 40, 41, 17, 21, 45, 44, 20],
[18, 22, 46, 47, 23, 19, 43, 42],
[ 0, 32,  8, 40, 16, 24],
[ 1, 25, 17, 41,  9, 33],
[ 2, 26, 18, 42, 10, 34],
[ 3, 35, 11, 43, 19, 27],
[ 4, 28, 20, 44, 12, 36],
[ 5, 37, 13, 45, 21, 29],
[ 6, 38, 14, 46, 22, 30],
[ 7, 31, 23, 47, 15, 39],
[ 0,  2, 34, 32],
[ 1, 33, 35,  3],
[ 4, 36, 38,  6],
[ 5,  7, 39, 37],
[ 8,  9, 41, 40],
[10, 42, 43, 11],
[12, 44, 45, 13],
[14, 15, 47, 46],
[16, 20, 28, 24],
[17, 25, 29, 21],
[18, 26, 30, 22],
[19, 23, 31, 27]
];

    
return polyhedron({points:vertices, faces:faces});
}

polyh2.truncated_icosahedron = function () {
// http://dmccooey.com/polyhedra/TruncatedIcosahedron.html
var C0, C1, C2, C3, C4, vertices, faces;
    
C0 = (1 + Math.sqrt(5)) / 4;
C1 = (1 + Math.sqrt(5)) / 2;
C2 = (5 + Math.sqrt(5)) / 4;
C3 = (2 + Math.sqrt(5)) / 2;
C4 = 3 * (1 + Math.sqrt(5)) / 4;

vertices = [
[ 0.5,  0.0,   C4],
[ 0.5,  0.0,  -C4],
[-0.5,  0.0,   C4],
[-0.5,  0.0,  -C4],
[  C4,  0.5,  0.0],
[  C4, -0.5,  0.0],
[ -C4,  0.5,  0.0],
[ -C4, -0.5,  0.0],
[ 0.0,   C4,  0.5],
[ 0.0,   C4, -0.5],
[ 0.0,  -C4,  0.5],
[ 0.0,  -C4, -0.5],
[ 1.0,   C0,   C3],
[ 1.0,   C0,  -C3],
[ 1.0,  -C0,   C3],
[ 1.0,  -C0,  -C3],
[-1.0,   C0,   C3],
[-1.0,   C0,  -C3],
[-1.0,  -C0,   C3],
[-1.0,  -C0,  -C3],
[  C3,  1.0,   C0],
[  C3,  1.0,  -C0],
[  C3, -1.0,   C0],
[  C3, -1.0,  -C0],
[ -C3,  1.0,   C0],
[ -C3,  1.0,  -C0],
[ -C3, -1.0,   C0],
[ -C3, -1.0,  -C0],
[  C0,   C3,  1.0],
[  C0,   C3, -1.0],
[  C0,  -C3,  1.0],
[  C0,  -C3, -1.0],
[ -C0,   C3,  1.0],
[ -C0,   C3, -1.0],
[ -C0,  -C3,  1.0],
[ -C0,  -C3, -1.0],
[ 0.5,   C1,   C2],
[ 0.5,   C1,  -C2],
[ 0.5,  -C1,   C2],
[ 0.5,  -C1,  -C2],
[-0.5,   C1,   C2],
[-0.5,   C1,  -C2],
[-0.5,  -C1,   C2],
[-0.5,  -C1,  -C2],
[  C2,  0.5,   C1],
[  C2,  0.5,  -C1],
[  C2, -0.5,   C1],
[  C2, -0.5,  -C1],
[ -C2,  0.5,   C1],
[ -C2,  0.5,  -C1],
[ -C2, -0.5,   C1],
[ -C2, -0.5,  -C1],
[  C1,   C2,  0.5],
[  C1,   C2, -0.5],
[  C1,  -C2,  0.5],
[  C1,  -C2, -0.5],
[ -C1,   C2,  0.5],
[ -C1,   C2, -0.5],
[ -C1,  -C2,  0.5],
[ -C1,  -C2, -0.5]
];

faces = [
[ 0,  2, 18, 42, 38, 14],
[ 1,  3, 17, 41, 37, 13],
[ 2,  0, 12, 36, 40, 16],
[ 3,  1, 15, 39, 43, 19],
[ 4,  5, 23, 47, 45, 21],
[ 5,  4, 20, 44, 46, 22],
[ 6,  7, 26, 50, 48, 24],
[ 7,  6, 25, 49, 51, 27],
[ 8,  9, 33, 57, 56, 32],
[ 9,  8, 28, 52, 53, 29],
[10, 11, 31, 55, 54, 30],
[11, 10, 34, 58, 59, 35],
[12, 44, 20, 52, 28, 36],
[13, 37, 29, 53, 21, 45],
[14, 38, 30, 54, 22, 46],
[15, 47, 23, 55, 31, 39],
[16, 40, 32, 56, 24, 48],
[17, 49, 25, 57, 33, 41],
[18, 50, 26, 58, 34, 42],
[19, 43, 35, 59, 27, 51],
[ 0, 14, 46, 44, 12],
[ 1, 13, 45, 47, 15],
[ 2, 16, 48, 50, 18],
[ 3, 19, 51, 49, 17],
[ 4, 21, 53, 52, 20],
[ 5, 22, 54, 55, 23],
[ 6, 24, 56, 57, 25],
[ 7, 27, 59, 58, 26],
[ 8, 32, 40, 36, 28],
[ 9, 29, 37, 41, 33],
[10, 30, 38, 42, 34],
[11, 35, 43, 39, 31]
];

    
return polyhedron({points:vertices, faces:faces});
}

polyh2.rhombicosidodecahedron = function () {
// http://dmccooey.com/polyhedra/Rhombicosidodecahedron.html
var C0, C1, C2, C3, C4, vertices, faces;
    
C0 = (1 + Math.sqrt(5)) / 4;
C1 = (3 + Math.sqrt(5)) / 4;
C2 = (1 + Math.sqrt(5)) / 2;
C3 = (5 + Math.sqrt(5)) / 4;
C4 = (2 + Math.sqrt(5)) / 2;

vertices = [
[ 0.5,  0.5,   C4],
[ 0.5,  0.5,  -C4],
[ 0.5, -0.5,   C4],
[ 0.5, -0.5,  -C4],
[-0.5,  0.5,   C4],
[-0.5,  0.5,  -C4],
[-0.5, -0.5,   C4],
[-0.5, -0.5,  -C4],
[  C4,  0.5,  0.5],
[  C4,  0.5, -0.5],
[  C4, -0.5,  0.5],
[  C4, -0.5, -0.5],
[ -C4,  0.5,  0.5],
[ -C4,  0.5, -0.5],
[ -C4, -0.5,  0.5],
[ -C4, -0.5, -0.5],
[ 0.5,   C4,  0.5],
[ 0.5,   C4, -0.5],
[ 0.5,  -C4,  0.5],
[ 0.5,  -C4, -0.5],
[-0.5,   C4,  0.5],
[-0.5,   C4, -0.5],
[-0.5,  -C4,  0.5],
[-0.5,  -C4, -0.5],
[ 0.0,   C1,   C3],
[ 0.0,   C1,  -C3],
[ 0.0,  -C1,   C3],
[ 0.0,  -C1,  -C3],
[  C3,  0.0,   C1],
[  C3,  0.0,  -C1],
[ -C3,  0.0,   C1],
[ -C3,  0.0,  -C1],
[  C1,   C3,  0.0],
[  C1,  -C3,  0.0],
[ -C1,   C3,  0.0],
[ -C1,  -C3,  0.0],
[  C1,   C0,   C2],
[  C1,   C0,  -C2],
[  C1,  -C0,   C2],
[  C1,  -C0,  -C2],
[ -C1,   C0,   C2],
[ -C1,   C0,  -C2],
[ -C1,  -C0,   C2],
[ -C1,  -C0,  -C2],
[  C2,   C1,   C0],
[  C2,   C1,  -C0],
[  C2,  -C1,   C0],
[  C2,  -C1,  -C0],
[ -C2,   C1,   C0],
[ -C2,   C1,  -C0],
[ -C2,  -C1,   C0],
[ -C2,  -C1,  -C0],
[  C0,   C2,   C1],
[  C0,   C2,  -C1],
[  C0,  -C2,   C1],
[  C0,  -C2,  -C1],
[ -C0,   C2,   C1],
[ -C0,   C2,  -C1],
[ -C0,  -C2,   C1],
[ -C0,  -C2,  -C1]
];
faces = [
[24, 52, 16, 20, 56],
[25, 57, 21, 17, 53],
[26, 58, 22, 18, 54],
[27, 55, 19, 23, 59],
[28, 36,  0,  2, 38],
[29, 39,  3,  1, 37],
[30, 42,  6,  4, 40],
[31, 41,  5,  7, 43],
[32, 44,  8,  9, 45],
[33, 47, 11, 10, 46],
[34, 49, 13, 12, 48],
[35, 50, 14, 15, 51],
[ 0, 36, 52, 24],
[ 1, 25, 53, 37],
[ 2, 26, 54, 38],
[ 3, 39, 55, 27],
[ 4, 24, 56, 40],
[ 5, 41, 57, 25],
[ 6, 42, 58, 26],
[ 7, 27, 59, 43],
[ 8, 44, 36, 28],
[ 9, 29, 37, 45],
[10, 28, 38, 46],
[11, 47, 39, 29],
[12, 30, 40, 48],
[13, 49, 41, 31],
[14, 50, 42, 30],
[15, 31, 43, 51],
[16, 52, 44, 32],
[17, 32, 45, 53],
[18, 33, 46, 54],
[19, 55, 47, 33],
[20, 34, 48, 56],
[21, 57, 49, 34],
[22, 58, 50, 35],
[23, 35, 51, 59],
[ 0,  4,  6,  2],
[ 1,  3,  7,  5],
[ 8, 10, 11,  9],
[12, 13, 15, 14],
[16, 17, 21, 20],
[18, 22, 23, 19],
[24,  4,  0],
[25,  1,  5],
[26,  2,  6],
[27,  7,  3],
[28, 10,  8],
[29,  9, 11],
[30, 12, 14],
[31, 15, 13],
[32, 17, 16],
[33, 18, 19],
[34, 20, 21],
[35, 23, 22],
[36, 44, 52],
[37, 53, 45],
[38, 54, 46],
[39, 47, 55],
[40, 56, 48],
[41, 49, 57],
[42, 50, 58],
[43, 59, 51]
];

return polyhedron({points:vertices, faces:faces});
}

polyh2.snub_dodecahedron_laevo = function (){
// http://dmccooey.com/polyhedra/LsnubDodecahedron.html
var C0, C1,C2,C3,C4,C6,C7,C8,C9,C10,C11,C12,C13,C14, vertices, faces;
    
C0  = 0.192893711352359022108262546061;
C1  = 0.330921024729844230963655269187;
C2  = 0.374821658114562295266609516608;
C3  = 0.567715369466921317374872062669;
C4  = 0.643029605914072573107464141441;
C5  = 0.728335176957191477360671629838;
C6  = 0.847550046789060797396217956030;
C7  = 1.103156835071753772627281146446;
C8  = 1.24950378846302719500774109632;
C9  = 1.41526541625598211477109001870;
C10 = 1.45402422933801541929649491091;
C11 = 1.64691794069037444140475745697;
C12 = 1.74618644098582634573474528789;
C13 = 1.97783896542021867236841272616;
C14 = 2.097053835252087992403959052348;

vertices = [
[  C2,  -C1,  C14],
[  C2,   C1, -C14],
[ -C2,   C1,  C14],
[ -C2,  -C1, -C14],
[ C14,  -C2,   C1],
[ C14,   C2,  -C1],
[-C14,   C2,   C1],
[-C14,  -C2,  -C1],
[  C1, -C14,   C2],
[  C1,  C14,  -C2],
[ -C1,  C14,   C2],
[ -C1, -C14,  -C2],
[  C3,   C4,  C13],
[  C3,  -C4, -C13],
[ -C3,  -C4,  C13],
[ -C3,   C4, -C13],
[ C13,   C3,   C4],
[ C13,  -C3,  -C4],
[-C13,  -C3,   C4],
[-C13,   C3,  -C4],
[  C4,  C13,   C3],
[  C4, -C13,  -C3],
[ -C4, -C13,   C3],
[ -C4,  C13,  -C3],
[  C0,  -C8,  C12],
[  C0,   C8, -C12],
[ -C0,   C8,  C12],
[ -C0,  -C8, -C12],
[ C12,  -C0,   C8],
[ C12,   C0,  -C8],
[-C12,   C0,   C8],
[-C12,  -C0,  -C8],
[  C8, -C12,   C0],
[  C8,  C12,  -C0],
[ -C8,  C12,   C0],
[ -C8, -C12,  -C0],
[  C7,  -C6,  C11],
[  C7,   C6, -C11],
[ -C7,   C6,  C11],
[ -C7,  -C6, -C11],
[ C11,  -C7,   C6],
[ C11,   C7,  -C6],
[-C11,   C7,   C6],
[-C11,  -C7,  -C6],
[  C6, -C11,   C7],
[  C6,  C11,  -C7],
[ -C6,  C11,   C7],
[ -C6, -C11,  -C7],
[  C9,   C5,  C10],
[  C9,  -C5, -C10],
[ -C9,  -C5,  C10],
[ -C9,   C5, -C10],
[ C10,   C9,   C5],
[ C10,  -C9,  -C5],
[-C10,  -C9,   C5],
[-C10,   C9,  -C5],
[  C5,  C10,   C9],
[  C5, -C10,  -C9],
[ -C5, -C10,   C9],
[ -C5,  C10,  -C9]
];

faces = [
[ 0, 36, 28, 48, 12],
[ 1, 37, 29, 49, 13],
[ 2, 38, 30, 50, 14],
[ 3, 39, 31, 51, 15],
[ 4, 40, 32, 53, 17],
[ 5, 41, 33, 52, 16],
[ 6, 42, 34, 55, 19],
[ 7, 43, 35, 54, 18],
[ 8, 44, 24, 58, 22],
[ 9, 45, 25, 59, 23],
[10, 46, 26, 56, 20],
[11, 47, 27, 57, 21],
[ 0,  2, 14],
[ 1,  3, 15],
[ 2,  0, 12],
[ 3,  1, 13],
[ 4,  5, 16],
[ 5,  4, 17],
[ 6,  7, 18],
[ 7,  6, 19],
[ 8, 11, 21],
[ 9, 10, 20],
[10,  9, 23],
[11,  8, 22],
[12, 48, 56],
[13, 49, 57],
[14, 50, 58],
[15, 51, 59],
[16, 52, 48],
[17, 53, 49],
[18, 54, 50],
[19, 55, 51],
[20, 56, 52],
[21, 57, 53],
[22, 58, 54],
[23, 59, 55],
[24, 44, 36],
[25, 45, 37],
[26, 46, 38],
[27, 47, 39],
[28, 36, 40],
[29, 37, 41],
[30, 38, 42],
[31, 39, 43],
[32, 40, 44],
[33, 41, 45],
[34, 42, 46],
[35, 43, 47],
[36,  0, 24],
[37,  1, 25],
[38,  2, 26],
[39,  3, 27],
[40,  4, 28],
[41,  5, 29],
[42,  6, 30],
[43,  7, 31],
[44,  8, 32],
[45,  9, 33],
[46, 10, 34],
[47, 11, 35],
[48, 28, 16],
[49, 29, 17],
[50, 30, 18],
[51, 31, 19],
[52, 33, 20],
[53, 32, 21],
[54, 35, 22],
[55, 34, 23],
[56, 26, 12],
[57, 27, 13],
[58, 24, 14],
[59, 25, 15],
[24,  0, 14],
[25,  1, 15],
[26,  2, 12],
[27,  3, 13],
[28,  4, 16],
[29,  5, 17],
[30,  6, 18],
[31,  7, 19],
[32,  8, 21],
[33,  9, 20],
[34, 10, 23],
[35, 11, 22],
[36, 44, 40],
[37, 45, 41],
[38, 46, 42],
[39, 47, 43],
[48, 52, 56],
[49, 53, 57],
[50, 54, 58],
[51, 55, 59]
];
    
return polyhedron({points:vertices, faces:faces});
}

polyh2.snub_dodecahedron_dextro = function (){
// http://dmccooey.com/polyhedra/RsnubDodecahedron.html
var C0, C1,C2,C3,C4,C6,C7,C8,C9,C10,C11,C12,C13,C14, vertices, faces;
    
C0  = 0.192893711352359022108262546061;
C1  = 0.330921024729844230963655269187;
C2  = 0.374821658114562295266609516608;
C3  = 0.567715369466921317374872062669;
C4  = 0.643029605914072573107464141441;
C5  = 0.728335176957191477360671629838;
C6  = 0.847550046789060797396217956030;
C7  = 1.103156835071753772627281146446;
C8  = 1.24950378846302719500774109632;
C9  = 1.41526541625598211477109001870;
C10 = 1.45402422933801541929649491091;
C11 = 1.64691794069037444140475745697;
C12 = 1.74618644098582634573474528789;
C13 = 1.97783896542021867236841272616;
C14 = 2.097053835252087992403959052348;

vertices =[
[  C2,   C1,  C14],
[  C2,  -C1, -C14],
[ -C2,  -C1,  C14],
[ -C2,   C1, -C14],
[ C14,   C2,   C1],
[ C14,  -C2,  -C1],
[-C14,  -C2,   C1],
[-C14,   C2,  -C1],
[  C1,  C14,   C2],
[  C1, -C14,  -C2],
[ -C1, -C14,   C2],
[ -C1,  C14,  -C2],
[  C3,  -C4,  C13],
[  C3,   C4, -C13],
[ -C3,   C4,  C13],
[ -C3,  -C4, -C13],
[ C13,  -C3,   C4],
[ C13,   C3,  -C4],
[-C13,   C3,   C4],
[-C13,  -C3,  -C4],
[  C4, -C13,   C3],
[  C4,  C13,  -C3],
[ -C4,  C13,   C3],
[ -C4, -C13,  -C3],
[  C0,   C8,  C12],
[  C0,  -C8, -C12],
[ -C0,  -C8,  C12],
[ -C0,   C8, -C12],
[ C12,   C0,   C8],
[ C12,  -C0,  -C8],
[-C12,  -C0,   C8],
[-C12,   C0,  -C8],
[  C8,  C12,   C0],
[  C8, -C12,  -C0],
[ -C8, -C12,   C0],
[ -C8,  C12,  -C0],
[  C7,   C6,  C11],
[  C7,  -C6, -C11],
[ -C7,  -C6,  C11],
[ -C7,   C6, -C11],
[ C11,   C7,   C6],
[ C11,  -C7,  -C6],
[-C11,  -C7,   C6],
[-C11,   C7,  -C6],
[  C6,  C11,   C7],
[  C6, -C11,  -C7],
[ -C6, -C11,   C7],
[ -C6,  C11,  -C7],
[  C9,  -C5,  C10],
[  C9,   C5, -C10],
[ -C9,   C5,  C10],
[ -C9,  -C5, -C10],
[ C10,  -C9,   C5],
[ C10,   C9,  -C5],
[-C10,   C9,   C5],
[-C10,  -C9,  -C5],
[  C5, -C10,   C9],
[  C5,  C10,  -C9],
[ -C5,  C10,   C9],
[ -C5, -C10,  -C9]
];

faces = [
[ 0, 12, 48, 28, 36],
[ 1, 13, 49, 29, 37],
[ 2, 14, 50, 30, 38],
[ 3, 15, 51, 31, 39],
[ 4, 17, 53, 32, 40],
[ 5, 16, 52, 33, 41],
[ 6, 19, 55, 34, 42],
[ 7, 18, 54, 35, 43],
[ 8, 22, 58, 24, 44],
[ 9, 23, 59, 25, 45],
[10, 20, 56, 26, 46],
[11, 21, 57, 27, 47],
[ 0, 14,  2],
[ 1, 15,  3],
[ 2, 12,  0],
[ 3, 13,  1],
[ 4, 16,  5],
[ 5, 17,  4],
[ 6, 18,  7],
[ 7, 19,  6],
[ 8, 21, 11],
[ 9, 20, 10],
[10, 23,  9],
[11, 22,  8],
[12, 56, 48],
[13, 57, 49],
[14, 58, 50],
[15, 59, 51],
[16, 48, 52],
[17, 49, 53],
[18, 50, 54],
[19, 51, 55],
[20, 52, 56],
[21, 53, 57],
[22, 54, 58],
[23, 55, 59],
[24, 36, 44],
[25, 37, 45],
[26, 38, 46],
[27, 39, 47],
[28, 40, 36],
[29, 41, 37],
[30, 42, 38],
[31, 43, 39],
[32, 44, 40],
[33, 45, 41],
[34, 46, 42],
[35, 47, 43],
[36, 24,  0],
[37, 25,  1],
[38, 26,  2],
[39, 27,  3],
[40, 28,  4],
[41, 29,  5],
[42, 30,  6],
[43, 31,  7],
[44, 32,  8],
[45, 33,  9],
[46, 34, 10],
[47, 35, 11],
[48, 16, 28],
[49, 17, 29],
[50, 18, 30],
[51, 19, 31],
[52, 20, 33],
[53, 21, 32],
[54, 22, 35],
[55, 23, 34],
[56, 12, 26],
[57, 13, 27],
[58, 14, 24],
[59, 15, 25],
[24, 14,  0],
[25, 15,  1],
[26, 12,  2],
[27, 13,  3],
[28, 16,  4],
[29, 17,  5],
[30, 18,  6],
[31, 19,  7],
[32, 21,  8],
[33, 20,  9],
[34, 23, 10],
[35, 22, 11],
[36, 40, 44],
[37, 41, 45],
[38, 42, 46],
[39, 43, 47],
[48, 56, 52],
[49, 57, 53],
[50, 58, 54],
[51, 59, 55]
];

return polyhedron({points:vertices, faces:faces});
}

polyh2.truncated_icosidodecahedron = function (){
// http://dmccooey.com/polyhedra/TruncatedIcosidodecahedron.html
var C0, C1,C2,C3,C4,C6,C7,C8,C9, vertices, faces;

C0 = (3 + Math.sqrt(5)) / 4;
C1 = (1 + Math.sqrt(5)) / 2;
C2 = (5 + Math.sqrt(5)) / 4;
C3 = (2 + Math.sqrt(5)) / 2;
C4 = 3 * (1 + Math.sqrt(5)) / 4;
C5 = (3 + Math.sqrt(5)) / 2;
C6 = (5 + 3 * Math.sqrt(5)) / 4;
C7 = (4 + Math.sqrt(5)) / 2;
C8 = (7 + 3 * Math.sqrt(5)) / 4;
C9 = (3 + 2 * Math.sqrt(5)) / 2;

vertices = [
[ 0.5,  0.5,   C9],
[ 0.5,  0.5,  -C9],
[ 0.5, -0.5,   C9],
[ 0.5, -0.5,  -C9],
[-0.5,  0.5,   C9],
[-0.5,  0.5,  -C9],
[-0.5, -0.5,   C9],
[-0.5, -0.5,  -C9],
[  C9,  0.5,  0.5],
[  C9,  0.5, -0.5],
[  C9, -0.5,  0.5],
[  C9, -0.5, -0.5],
[ -C9,  0.5,  0.5],
[ -C9,  0.5, -0.5],
[ -C9, -0.5,  0.5],
[ -C9, -0.5, -0.5],
[ 0.5,   C9,  0.5],
[ 0.5,   C9, -0.5],
[ 0.5,  -C9,  0.5],
[ 0.5,  -C9, -0.5],
[-0.5,   C9,  0.5],
[-0.5,   C9, -0.5],
[-0.5,  -C9,  0.5],
[-0.5,  -C9, -0.5],
[ 1.0,   C0,   C8],
[ 1.0,   C0,  -C8],
[ 1.0,  -C0,   C8],
[ 1.0,  -C0,  -C8],
[-1.0,   C0,   C8],
[-1.0,   C0,  -C8],
[-1.0,  -C0,   C8],
[-1.0,  -C0,  -C8],
[  C8,  1.0,   C0],
[  C8,  1.0,  -C0],
[  C8, -1.0,   C0],
[  C8, -1.0,  -C0],
[ -C8,  1.0,   C0],
[ -C8,  1.0,  -C0],
[ -C8, -1.0,   C0],
[ -C8, -1.0,  -C0],
[  C0,   C8,  1.0],
[  C0,   C8, -1.0],
[  C0,  -C8,  1.0],
[  C0,  -C8, -1.0],
[ -C0,   C8,  1.0],
[ -C0,   C8, -1.0],
[ -C0,  -C8,  1.0],
[ -C0,  -C8, -1.0],
[ 0.5,   C3,   C7],
[ 0.5,   C3,  -C7],
[ 0.5,  -C3,   C7],
[ 0.5,  -C3,  -C7],
[-0.5,   C3,   C7],
[-0.5,   C3,  -C7],
[-0.5,  -C3,   C7],
[-0.5,  -C3,  -C7],
[  C7,  0.5,   C3],
[  C7,  0.5,  -C3],
[  C7, -0.5,   C3],
[  C7, -0.5,  -C3],
[ -C7,  0.5,   C3],
[ -C7,  0.5,  -C3],
[ -C7, -0.5,   C3],
[ -C7, -0.5,  -C3],
[  C3,   C7,  0.5],
[  C3,   C7, -0.5],
[  C3,  -C7,  0.5],
[  C3,  -C7, -0.5],
[ -C3,   C7,  0.5],
[ -C3,   C7, -0.5],
[ -C3,  -C7,  0.5],
[ -C3,  -C7, -0.5],
[  C2,   C1,   C6],
[  C2,   C1,  -C6],
[  C2,  -C1,   C6],
[  C2,  -C1,  -C6],
[ -C2,   C1,   C6],
[ -C2,   C1,  -C6],
[ -C2,  -C1,   C6],
[ -C2,  -C1,  -C6],
[  C6,   C2,   C1],
[  C6,   C2,  -C1],
[  C6,  -C2,   C1],
[  C6,  -C2,  -C1],
[ -C6,   C2,   C1],
[ -C6,   C2,  -C1],
[ -C6,  -C2,   C1],
[ -C6,  -C2,  -C1],
[  C1,   C6,   C2],
[  C1,   C6,  -C2],
[  C1,  -C6,   C2],
[  C1,  -C6,  -C2],
[ -C1,   C6,   C2],
[ -C1,   C6,  -C2],
[ -C1,  -C6,   C2],
[ -C1,  -C6,  -C2],
[  C0,   C4,   C5],
[  C0,   C4,  -C5],
[  C0,  -C4,   C5],
[  C0,  -C4,  -C5],
[ -C0,   C4,   C5],
[ -C0,   C4,  -C5],
[ -C0,  -C4,   C5],
[ -C0,  -C4,  -C5],
[  C5,   C0,   C4],
[  C5,   C0,  -C4],
[  C5,  -C0,   C4],
[  C5,  -C0,  -C4],
[ -C5,   C0,   C4],
[ -C5,   C0,  -C4],
[ -C5,  -C0,   C4],
[ -C5,  -C0,  -C4],
[  C4,   C5,   C0],
[  C4,   C5,  -C0],
[  C4,  -C5,   C0],
[  C4,  -C5,  -C0],
[ -C4,   C5,   C0],
[ -C4,   C5,  -C0],
[ -C4,  -C5,   C0],
[ -C4,  -C5,  -C0]
];

faces = [
[  0,   2,  26,  74, 106,  58,  56, 104,  72,  24],
[  1,  25,  73, 105,  57,  59, 107,  75,  27,   3],
[  4,  28,  76, 108,  60,  62, 110,  78,  30,   6],
[  5,   7,  31,  79, 111,  63,  61, 109,  77,  29],
[  8,   9,  33,  81, 113,  65,  64, 112,  80,  32],
[ 10,  34,  82, 114,  66,  67, 115,  83,  35,  11],
[ 12,  36,  84, 116,  68,  69, 117,  85,  37,  13],
[ 14,  15,  39,  87, 119,  71,  70, 118,  86,  38],
[ 16,  20,  44,  92, 100,  52,  48,  96,  88,  40],
[ 17,  41,  89,  97,  49,  53, 101,  93,  45,  21],
[ 18,  42,  90,  98,  50,  54, 102,  94,  46,  22],
[ 19,  23,  47,  95, 103,  55,  51,  99,  91,  43],
[  0,  24,  48,  52,  28,   4],
[  1,   5,  29,  53,  49,  25],
[  2,   6,  30,  54,  50,  26],
[  3,  27,  51,  55,  31,   7],
[  8,  32,  56,  58,  34,  10],
[  9,  11,  35,  59,  57,  33],
[ 12,  14,  38,  62,  60,  36],
[ 13,  37,  61,  63,  39,  15],
[ 16,  40,  64,  65,  41,  17],
[ 18,  19,  43,  67,  66,  42],
[ 20,  21,  45,  69,  68,  44],
[ 22,  46,  70,  71,  47,  23],
[ 72, 104,  80, 112,  88,  96],
[ 73,  97,  89, 113,  81, 105],
[ 74,  98,  90, 114,  82, 106],
[ 75, 107,  83, 115,  91,  99],
[ 76, 100,  92, 116,  84, 108],
[ 77, 109,  85, 117,  93, 101],
[ 78, 110,  86, 118,  94, 102],
[ 79, 103,  95, 119,  87, 111],
[  0,   4,   6,   2],
[  1,   3,   7,   5],
[  8,  10,  11,   9],
[ 12,  13,  15,  14],
[ 16,  17,  21,  20],
[ 18,  22,  23,  19],
[ 24,  72,  96,  48],
[ 25,  49,  97,  73],
[ 26,  50,  98,  74],
[ 27,  75,  99,  51],
[ 28,  52, 100,  76],
[ 29,  77, 101,  53],
[ 30,  78, 102,  54],
[ 31,  55, 103,  79],
[ 32,  80, 104,  56],
[ 33,  57, 105,  81],
[ 34,  58, 106,  82],
[ 35,  83, 107,  59],
[ 36,  60, 108,  84],
[ 37,  85, 109,  61],
[ 38,  86, 110,  62],
[ 39,  63, 111,  87],
[ 40,  88, 112,  64],
[ 41,  65, 113,  89],
[ 42,  66, 114,  90],
[ 43,  91, 115,  67],
[ 44,  68, 116,  92],
[ 45,  93, 117,  69],
[ 46,  94, 118,  70],
[ 47,  71, 119,  95]
];
    
return polyhedron({points:vertices, faces:faces});
}

}
  
